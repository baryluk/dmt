// Borrowed from https://dlang.org/

import core.stdc.stdlib

def void livingDangerously():
    // Access to C's malloc and free primitives
    enum bytes = float.sizeof * 1024 * 1024
    auto buf = malloc(bytes)
    // free automatically upon scope exit
    scope(exit):
        free(buf)
    // Interprets memory as an array of floats
    auto floats = cast(float[]) buf[0 .. bytes]
    // Even stack allocation is possible
    auto moreBuf = alloca(4096 * 100)
    //...

// Using inline asm for extra speed on x86
def uint checked_multiply(uint x, uint y):
    uint result
    version (D_InlineAsm_X86):
        // Inline assembler "sees" D variables and labels.
        asm:
            mov     EAX,x
            mul     EAX,y
            mov     result,EAX
            jc      Loverflow
        return result
    else:
        result = x * y
        if (!y || x <= uint.max / y):
           return result

    Loverflow:
    throw new Exception("multiply overflow")

def void main():
  // ...
